import requests
import argparse
import glob
import json 

parser = argparse.ArgumentParser()

parser.add_argument("--input", dest='data_directory', help="transcribed data")
parser.add_argument("--output", dest= "output_directory", help = "output file")
parser.add_argument("--gpt_version", dest= "gpt_version", help = "what version of gpt", default = "gpt-3.5-turbo")
parser.add_argument("--gpt_content", dest= "gpt_content", help = "instructions for gpt", default = "you are a helpful assistant, carefully fixing errors in documents")
parser.add_argument("--prompt", dest= "prompt", help = "what is your prompt for gpt?", nargs = "*")
parser.add_argument("--api_key", dest= "api_key", help = "where is your api key")
args = parser.parse_args()



with open(args.api_key, "r") as in_file:
    
    API_KEY = in_file.read() 

API_URL = 'https://api.openai.com/v1/chat/completions'

output_dictionary = {}

prompt_list = ["What follows is OCR from a piece of historical sheet music. This has introduced numerous errors into the text. Please correct these errors, and return the texts, without adding any other material", "After the word <TEXT>, there will be a text with numerous errors. It is the product of applying optical character recognition to a piece of historical sheet music. Please clean the text, removing any special characters, condensing any words separated by dashes, and correcting any spelling errors introduced by the OCR process. <TEXT>", "What follows is OCR from a piece of historical sheet music. This has introduced numerous errors into the text. Please correct these errors, and return the texts, without adding any other material, This is an example of this correction -- oe\place where I___ am bound for, My hon - ey! Dont you try\ndown in Mar - y-land state, My hon - ey! There's one __place_\n\nO4 +\n\n2 \u2014 ee\n\n{ :\n\n   \n  \n\n \n\nPile Dee\n\n<7\nrl be back__ here some\ ==> place where I am bound for, My honey! Dont you try down in Maryland state, My honey! There's one place Iâ€™ll be back here some. Here is the text ==>", "What follows is produced by applying OCR to a piece of 19th century sheet music. Please clean the text, removing any special characters or errors. Do not introduce anything else, or write any framing or analysis or discussion of the text. Do not add any words of any kind. Here is an example of successfull correction, from sae 3\nbut,16! acrofs\"th\u2019 Atlantic floods,\nThe ftar_ directed pilgrim fails!\nSee!fell'd by Commerce, float thy Woods;\nAnd cloath'd by ceres,wave thy vales! ==> into ==> but Lo! across the Atlantic Floods, the star-directed pilgrim fails! See! Felled by commerce, float thy Woods, and Cloathed by Ceres, Wave thy Vales,""The following text is the result of OCR from a piece of historical sheet music, which contains numerous errors. Please correct all OCR errors, including spelling mistakes, misplaced special characters, and incorrectly separated words. Return only the corrected text without adding any additional content or commentary.",
    "Below is a text generated by OCR from historical sheet music, which has introduced many errors. Please clean the text by correcting spelling mistakes, removing special characters, and condensing words that have been improperly separated. Provide only the corrected text without any additional material.",
    "The following text is the result of OCR from historical sheet music and contains many errors. Correct these errors, ensuring proper spelling, punctuation, and word separation. Do not add any extra content. Here is an example of a similar correction:\n\nOriginal: \"oe\\place where I___ am bound for, My hon - ey! Dont you try\\ndown in Mar - y-land state, My hon - ey! There's one __place_\\n\\nO4 +\\n\\n2 \\u2014 ee\\n\\n{ :\\n\\n   \\n  \\n\\n \\n\\nPile Dee\\n\\n<7\\nrl be back__ here some\"\n\nCorrected: \"place where I am bound for, My honey! Don't you try down in Maryland state, My honey! There's one place I'll be back here some.\"\n\nNow, please correct the following text:",
    "The following text was produced by OCR applied to 19th-century sheet music. Please clean the text by removing special characters and correcting any errors introduced by the OCR process. Provide only the corrected text without any additional words, framing, or analysis. Here is an example of successful correction:\n\nOriginal: \"but,16! acrofs\"th\\u2019 Atlantic floods,\\nThe ftar_ directed pilgrim fails!\\nSee!fell'd by Commerce, float thy Woods;\\nAnd cloath'd by ceres,wave thy vales!\"\n\nCorrected: \"but Lo! across the Atlantic Floods, the star-directed pilgrim fails! See! Felled by commerce, float thy Woods, and Cloathed by Ceres, Wave thy Vales.\"\n\nNow, please correct the following text: "]    



def chat_with_gpt(prompt, model= args.gpt_version):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {API_KEY}'
    }
    data = {
        "model": args.gpt_version,
        "messages": [
            {"role": "system", "content": args.gpt_content},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post(API_URL, headers=headers, json=data)
    result = response.json()
    result['used_prompt'] = prompt 
    return result

materials_list = []
counter = 0 
with open (args.data_directory, "r") as in_file:
            for x in in_file: 
                local = json.loads(x)
                materials_list.append(local)

            
print(len(materials_list))
       # pytesseract_material = json.load(in_file)

for x  in range(1):
    
    for prompt in prompt_list: 
        
        prompt = prompt + materials_list[x]["full_text"] 
        print(prompt)
        response_file = chat_with_gpt(prompt)
        #print(response_file)

        if "choices" in response_file:

            text_file = response_file["choices"][0]["message"]["content"]
            print(text_file)
            entry = materials_list[x]["title"]
            
            local_dict = {prompt : text_file}

            if output_dictionary.get(entry) != None:
                output_dictionary[entry].update(local_dict)

            else:
                output_dictionary[entry] = local_dict
        else:
            print("no choices!")

with open(args.output_directory, "w") as out_file:
    json.dump(output_dictionary, out_file, indent = 4)
